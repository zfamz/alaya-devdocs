(self.webpackChunkalaya_docs=self.webpackChunkalaya_docs||[]).push([[6056],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return d},kt:function(){return m}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(t),m=r,f=p["".concat(s,".").concat(m)]||p[m]||u[m]||i;return t?a.createElement(f,o(o({ref:n},d),{},{components:t})):a.createElement(f,o({ref:n},d))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=p;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},8764:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return c},default:function(){return u}});var a=t(2122),r=t(9756),i=(t(7294),t(3905)),o={id:"ARC20",title:"ARC20",sidebar_label:"ARC20"},l=void 0,s={unversionedId:"ARC20",id:"ARC20",isDocsHomePage:!1,title:"ARC20",description:"Abstract",source:"@site/docs/ARC20.md",sourceDirName:".",slug:"/ARC20",permalink:"/alaya-devdocs/en/ARC20",editUrl:"https://github.com/AlayaNetwork/alaya-devdocs/tree/main/website/docs/ARC20.md",version:"current",frontMatter:{id:"ARC20",title:"ARC20",sidebar_label:"ARC20"},sidebar:"docs",previous:{title:"Samurai API",permalink:"/alaya-devdocs/en/Samurai_API"},next:{title:"ARC721",permalink:"/alaya-devdocs/en/ARC721"}},c=[{value:"Abstract",id:"abstract",children:[]},{value:"Token Standards",id:"token-standards",children:[{value:"Required interfaces",id:"required-interfaces",children:[]},{value:"Optionally interfaces",id:"optionally-interfaces",children:[]},{value:"Event",id:"event",children:[]}]},{value:"Example",id:"example",children:[]},{value:"View Token",id:"view-token",children:[]},{value:"Contract Deployment",id:"contract-deployment",children:[]},{value:"Method call",id:"method-call",children:[{value:"Install the dependencies",id:"install-the-dependencies",children:[]},{value:"Instantiation",id:"instantiation",children:[]},{value:"Query Contract Information",id:"query-contract-information",children:[]},{value:"Sending a contract transaction",id:"sending-a-contract-transaction",children:[]},{value:"Get contract events",id:"get-contract-events",children:[]}]}],d={toc:c};function u(e){var n=e.components,t=(0,r.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"abstract"},"Abstract"),(0,i.kt)("p",null,"The ARC-20 standard allows for the implementation of a standard API for tokens within smart contracts. This standard provides basic functionality to transfer tokens, as well as allow tokens to be approved so they can be spent by another on-chain third party. It is fully compatible with ",(0,i.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-20"},"ERC-20"),"."),(0,i.kt)("h2",{id:"token-standards"},"Token Standards"),(0,i.kt)("p",null,"ARC-20 is a standard for convertible fungible tokens. The contract standard specifies contract-defined functions, events, etc. All contracts written in compliance with this standard are considered to be an ARC-20 contract."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"contract ARC20 {\n\n    //required\n    function totalSupply() constant returns (uint theTotalSupply);\n    function balanceOf(address _owner) constant returns (uint balance);\n    function transfer(address _to, uint _value) returns (bool success);\n    function transferFrom(address _from, address _to, uint _value) returns (bool success);\n    function approve(address _spender, uint _value) returns (bool success);\n    function allowance(address _owner, address _spender) constant returns (uint remaining);\n    \n    //optional\n    function name() public view returns (string);\n    function symbol() public view returns (string);\n    function decimals() public view returns (uint8);\n    \n    //events\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n")),(0,i.kt)("h3",{id:"required-interfaces"},"Required interfaces"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"totalSupply"),": Returns the total token supply."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"balanceOf"),": Returns the account balance of another account with address _owner."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"transfer"),": Transfers _value amount of tokens to address _to, and MUST fire the Transfer event. The function SHOULD throw if the message caller\u2019s account balance does not have enough tokens to spend."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"approve"),": Allows _spender to withdraw from your account multiple times, up to the _value amount. If this function is called again it overwrites the current allowance with _value."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"transferFrom"),": Transfers _value amount of tokens from address _from to address _to, and MUST fire the Transfer event."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"allowance"),": Allows _spender to withdraw from your account multiple times, up to the _value amount. If this function is called again it overwrites the current allowance with _value.")),(0,i.kt)("h3",{id:"optionally-interfaces"},"Optionally interfaces"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"name"),": Return the name of the token."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"symbol"),": Return token symbol."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"decimals"),": Return Token Accuracy.")),(0,i.kt)("h3",{id:"event"},"Event"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Transfer"),": MUST trigger when tokens are transferred, including zero value transfers.\nA token contract which creates new tokens SHOULD trigger a Transfer event with the _from address set to 0x0 when tokens are created."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Approval"),": MUST trigger on any successful call to approve(address _spender, uint256 _value).")),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"ARC-20 standard is fully compatible with ERC-20, examples are available ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/OpenZeppelin/openzeppelin-contracts/tree/9b3710465583284b8c4c5d2245749246bb2e0094/contracts/token/ERC20"},"here"),"."),(0,i.kt)("h2",{id:"view-token"},"View Token"),(0,i.kt)("p",null,"You can view ARC-20 Token and transaction history in ",(0,i.kt)("a",{parentName:"p",href:"https://scan.alaya.network/tokens/tokensTranfer/arc20"},"Alaya Explorer")," and ",(0,i.kt)("a",{parentName:"p",href:"/alaya-devdocs/en/ATON_user_manual/"},"ATON Wallet"),"."),(0,i.kt)("h2",{id:"contract-deployment"},"Contract Deployment"),(0,i.kt)("p",null,"Please refer to ",(0,i.kt)("a",{parentName:"p",href:"/alaya-devdocs/en/Solidity_Getting_started"},"Solidity Getting started"),"."),(0,i.kt)("h2",{id:"method-call"},"Method call"),(0,i.kt)("p",null,"Here's an example of how to call a contract method using the Python SDK."),(0,i.kt)("h3",{id:"install-the-dependencies"},"Install the dependencies"),(0,i.kt)("p",null,"Use the following command to install the ",(0,i.kt)("inlineCode",{parentName:"p"},"python library"),", Python version 3.7.5+ is recommended:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"pip install client-sdk-python\n")),(0,i.kt)("p",null,"During the installation process, some dependency packages will require ",(0,i.kt)("inlineCode",{parentName:"p"},"c++14")," compilation, please download ",(0,i.kt)("a",{parentName:"p",href:"http://go.microsoft.com/fwlink/?LinkId=691126"},"cppbuildtools")," after you see the relevant prompt, use the default value to install it, and then re-execute the pip install command."),(0,i.kt)("h3",{id:"instantiation"},"Instantiation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from client_sdk_python import Web3, HTTPProvider\n\nrpc, chain_id, hrp = \'http://127.0.0.1:6789\', 201030, \'ATP\'\nw3 = Web3(HTTPProvider(rpc), chain_id=chain_id, hrp_type=hrp)\nabi = [\n  {\n    "inputs":[\n      {"internalType":"uint256", "name":"initialSupply", "type":"uint256"},\n      {"internalType":"string", "name":"tokenName", "type":"string"},\n      {"internalType":"string", "name":"tokenSymbol", "type":"string"}\n    ],\n    "stateMutability":"nonpayable",\n    "type":"constructor"\n  },\n  {\n    "inputs":[],\n    "name":"totalSupply",\n    "outputs":[{"internalType":"uint256", "name":"", "type":"uint256"}],\n    "stateMutability":"view",\n    "type":"function"\n  },\n  {\n    "inputs":[{"internalType":"address", "name":"", "type":"address"}],\n    "name":"balanceOf",\n    "outputs":[{"internalType":"uint256", "name":"", "type":"uint256"}],\n    "stateMutability":"view",\n    "type":"function"\n  },\n  {\n    "inputs":[\n      {"internalType":"address", "name":"_to", "type":"address"},\n      {"internalType":"uint256", "name":"_value", "type":"uint256"}\n    ],\n    "name":"transfer",\n    "outputs":[{"internalType":"bool", "name":"success", "type":"bool"}],\n    "stateMutability":"nonpayable",\n    "type":"function"\n  },\n  {\n    "anonymous":false,\n    "inputs":[\n      {"indexed":true, "internalType":"address", "name":"from", "type":"address"},\n      {"indexed":true, "internalType":"address", "name":"to", "type":"address"},\n      {"indexed":false, "internalType":"uint256", "name":"value", "type":"uint256"}\n    ],\n    "name":"Transfer",\n    "type":"event"\n  }\n]   \narc20 = w3.eth.contract(address=\'contract address\', abi=abi)\n\nprint([func for func in arc20.functions])\nprint([event for event in arc20.events])\n')),(0,i.kt)("h3",{id:"query-contract-information"},"Query Contract Information"),(0,i.kt)("p",null,"The following is an example of totalSupply, balanceOf, other query methods are similar to this."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# Query the total number of tokens issued\narc20.functions.totalSupply().call()\n# Query the token balance of the specified address\narc20.functions.balanceOf('your address').call()\n")),(0,i.kt)("h3",{id:"sending-a-contract-transaction"},"Sending a contract transaction"),(0,i.kt)("p",null,"The following is an example of a transfer call."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# Transfer the token to the specified account\ntx = {\n    'chainId': w3.chain_id,\n    'nonce': w3.eth.getTransactionCount('your address'),\n    'gas': 4012388,\n    'value': 0,\n    'gasPrice': 1000000000,\n}\ntxn = arc20.functions.transfer(to='to address', value=1 * 10 ** 18).buildTransaction(tx)\nsigned_txn = w3.eth.account.signTransaction(txn, private_key='your private key')\ntx_hash = w3.eth.sendRawTransaction(signed_txn.rawTransaction).hex()\nreceipt = w3.eth.waitForTransactionReceipt(tx_hash)\n")),(0,i.kt)("h3",{id:"get-contract-events"},"Get contract events"),(0,i.kt)("p",null,"As an example of a transfer transaction event."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"events = arc20.events.Transfer().processReceipt(receipt)\n")))}u.isMDXComponent=!0}}]);